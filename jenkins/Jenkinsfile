pipeline {
    agent any

    environment {
        SONARQUBE = 'sonar1' // Tên cấu hình SonarQube đã thêm trong Jenkins > Manage Jenkins > Configure System
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-token', url: 'https://github.com/datnguyen101004/nt548_lab2_cau3.git'
            }
        }

        stage('Build & Test') {
            parallel {
                stage('Build User Service') {
                    steps {
                        dir('user-service') {
                            sh 'mvn clean compile'
                            sh 'mvn test'
                        }
                    }
                }

                stage('Build Blog Service') {
                    steps {
                        dir('blog-service') {
                            sh 'mvn clean compile'
                            sh 'mvn test'
                        }
                    }
                }

                stage('Build API Gateway') {
                    steps {
                        dir('api-gateway') {
                            sh 'mvn clean compile'
                            sh 'mvn test'
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE}") {
                    dir('user-service') {
                        sh 'mvn verify sonar:sonar -Dsonar.projectKey=user-service'
                    }
                    dir('blog-service') {
                        sh 'mvn verify sonar:sonar -Dsonar.projectKey=blog-service'
                    }
                    dir('api-gateway') {
                        sh 'mvn verify sonar:sonar -Dsonar.projectKey=api-gateway'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('User Service') {
                    steps {
                        dir('user-service') {
                            sh 'docker build -t user-service:latest .'
                        }
                    }
                }
                stage('Blog Service') {
                    steps {
                        dir('blog-service') {
                            sh 'docker build -t blog-service:latest .'
                        }
                    }
                }
                stage('API Gateway') {
                    steps {
                        dir('api-gateway') {
                            sh 'docker build -t api-gateway:latest .'
                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh 'docker-compose down || true'
                sh 'docker-compose up -d --build'
            }
        }
    }
}
